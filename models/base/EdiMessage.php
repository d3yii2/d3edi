<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3edi\models\base;

use Yii;

use d3system\behaviors\D3DateTimeBehavior;

/**
 * This is the base-model class for table "edi_message".
 *
 * @property integer $id
 * @property string $read_time
 * @property string $type
 * @property integer $interchange_sender_company_id
 * @property integer $interchange_recipient_company_id
 * @property string $preperation_time
 * @property string $messageReferenceNumber
 * @property integer $message_type_id
 * @property string $messageRelease
 * @property string $data
 * @property string $status
 * @property string $errror
 * @property string $file_name
 *
 * @property \d3yii2\d3edi\models\EdiMessageRef[] $ediMessageRefs
 * @property \d3yii2\d3edi\models\EdiCompany $interchangeRecipientCompany
 * @property \d3yii2\d3edi\models\EdiCompany $interchangeSenderCompany
 * @property \d3yii2\d3edi\models\EdiMessageType $messageType
 * @property string $aliasModel
 */
abstract class EdiMessage extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    public const TYPE_IN = 'In';
    public const TYPE_OUT = 'Out';
    public const STATUS_NEW = 'New';
    public const STATUS_PROCESSED = 'Processed';
    public const STATUS_ERROR = 'Error';
    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'edi_message';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = [
        ];
        $behaviors = array_merge(
            $behaviors,
            D3DateTimeBehavior::getConfig(['read_time','preperation_time'])
        );
        return $behaviors;
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'required' => [['type', 'message_type_id', 'status'], 'required'],
            'enum-type' => ['type', 'in', 'range' => [
                    self::TYPE_IN,
                    self::TYPE_OUT,
                ]
            ],
            'enum-status' => ['status', 'in', 'range' => [
                    self::STATUS_NEW,
                    self::STATUS_PROCESSED,
                    self::STATUS_ERROR,
                ]
            ],
            'tinyint Unsigned' => [['interchange_sender_company_id','interchange_recipient_company_id','message_type_id'],'integer' ,'min' => 0 ,'max' => 255],
            'integer Unsigned' => [['id'],'integer' ,'min' => 0 ,'max' => 4294967295],
            [['read_time', 'preperation_time'], 'safe'],
            [['type', 'data', 'status', 'errror'], 'string'],
            [['messageReferenceNumber'], 'string', 'max' => 14],
            [['messageRelease'], 'string', 'max' => 3],
            [['file_name'], 'string', 'max' => 255],
            [['message_type_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3edi\models\EdiMessageType::className(), 'targetAttribute' => ['message_type_id' => 'id']],
            [['interchange_recipient_company_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3edi\models\EdiCompany::className(), 'targetAttribute' => ['interchange_recipient_company_id' => 'id']],
            [['interchange_sender_company_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3edi\models\EdiCompany::className(), 'targetAttribute' => ['interchange_sender_company_id' => 'id']],
            'D3DateTimeBehavior' => [['read_time_local','preperation_time_local'],'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'read_time' => 'Read Time',
            'type' => 'Type',
            'interchange_sender_company_id' => 'Interchange Sender Company ID',
            'interchange_recipient_company_id' => 'Interchange Recipient Company ID',
            'preperation_time' => 'Preperation Time',
            'messageReferenceNumber' => 'Message Reference Number',
            'message_type_id' => 'Message Type ID',
            'messageRelease' => 'Message Release',
            'data' => 'Data',
            'status' => 'Status',
            'errror' => 'Errror',
            'file_name' => 'File Name',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEdiMessageRefs()
    {
        return $this->hasMany(\d3yii2\d3edi\models\EdiMessageRef::className(), ['message_id' => 'id'])->inverseOf('message');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInterchangeRecipientCompany()
    {
        return $this->hasOne(\d3yii2\d3edi\models\EdiCompany::className(), ['id' => 'interchange_recipient_company_id'])->inverseOf('ediMessages');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInterchangeSenderCompany()
    {
        return $this->hasOne(\d3yii2\d3edi\models\EdiCompany::className(), ['id' => 'interchange_sender_company_id'])->inverseOf('ediMessages0');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMessageType()
    {
        return $this->hasOne(\d3yii2\d3edi\models\EdiMessageType::className(), ['id' => 'message_type_id'])->inverseOf('ediMessages');
    }


    
    /**
     * @inheritdoc
     * @return \d3yii2\d3edi\models\EdiMessageQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \d3yii2\d3edi\models\EdiMessageQuery(get_called_class());
    }


    /**
     * get column type enum value label
     * @param string $value
     * @return string
     */
    public static function getTypeValueLabel($value): string
    {
        if(!$value){
            return '';
        }
        $labels = self::optsType();
        return $labels[$value] ?? $value;
    }

    /**
     * column type ENUM value labels
     * @return array
     */
    public static function optsType(): array
    {
        return [
            self::TYPE_IN => 'type',
            self::TYPE_OUT => 'type',
        ];
    }

    /**
     * get column status enum value label
     * @param string $value
     * @return string
     */
    public static function getStatusValueLabel($value): string
    {
        if(!$value){
            return '';
        }
        $labels = self::optsStatus();
        return $labels[$value] ?? $value;
    }

    /**
     * column status ENUM value labels
     * @return array
     */
    public static function optsStatus(): array
    {
        return [
            self::STATUS_NEW => 'status',
            self::STATUS_PROCESSED => 'status',
            self::STATUS_ERROR => 'status',
        ];
    }
    /**
    * ENUM field values
    */
    /**
     * @return bool
     */
    public function isTypeIn(): bool
    {
        return $this->type === self::TYPE_IN;
    }
    /**
     * @return bool
     */
    public function isTypeOut(): bool
    {
        return $this->type === self::TYPE_OUT;
    }
    /**
     * @return bool
     */
    public function isStatusNew(): bool
    {
        return $this->status === self::STATUS_NEW;
    }
    /**
     * @return bool
     */
    public function isStatusProcessed(): bool
    {
        return $this->status === self::STATUS_PROCESSED;
    }
    /**
     * @return bool
     */
    public function isStatusError(): bool
    {
        return $this->status === self::STATUS_ERROR;
    }

}
